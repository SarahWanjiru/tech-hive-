basePath: /
definitions:
  model.AddToCartModel:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  model.CreateOrderModel:
    properties:
      cart_id:
        type: integer
      shipping_address:
        type: string
    required:
    - cart_id
    - shipping_address
    type: object
  model.GeneralResponse:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  model.MpesaCallbackItem:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  model.MpesaCallbackMetadata:
    properties:
      item:
        items:
          $ref: '#/definitions/model.MpesaCallbackItem'
        type: array
    type: object
  model.MpesaCallbackRequest:
    properties:
      callback_metadata:
        $ref: '#/definitions/model.MpesaCallbackMetadata'
      checkout_request_id:
        type: string
      merchant_request_id:
        type: string
      result_code:
        type: integer
      result_desc:
        type: string
    type: object
  model.MpesaPaymentRequest:
    properties:
      amount:
        example: 1000
        minimum: 1
        type: number
      order_id:
        type: integer
      phone_number:
        example: "254712345678"
        type: string
    required:
    - amount
    - order_id
    - phone_number
    type: object
  model.ProductCreateOrUpdateModel:
    properties:
      description:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  model.ProductModel:
    properties:
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  model.ProductSearchModel:
    properties:
      in_stock:
        type: boolean
      limit:
        type: integer
      max_price:
        type: number
      min_price:
        type: number
      name:
        type: string
      page:
        type: integer
      sort_by:
        description: name, price, created_at
        type: string
      sort_order:
        description: asc, desc
        type: string
    type: object
  model.TransactionCreateUpdateModel:
    properties:
      id:
        type: string
      total_price:
        type: integer
      transaction_details:
        items:
          $ref: '#/definitions/model.TransactionDetailCreateUpdateModel'
        type: array
    type: object
  model.TransactionDetailCreateUpdateModel:
    properties:
      id:
        type: string
      price:
        type: integer
      product:
        $ref: '#/definitions/model.ProductModel'
      product_id:
        type: string
      quantity:
        type: integer
      sub_total_price:
        type: integer
    required:
    - price
    - product_id
    - quantity
    - sub_total_price
    type: object
  model.UpdateCartItemModel:
    properties:
      quantity:
        minimum: 1
        type: integer
    required:
    - quantity
    type: object
  model.UpdateOrderStatusModel:
    properties:
      status:
        enum:
        - pending
        - confirmed
        - processing
        - shipped
        - delivered
        - cancelled
        type: string
    required:
    - status
    type: object
  model.UserModel:
    properties:
      password:
        example: password123
        type: string
      username:
        example: user@example.com
        type: string
    required:
    - password
    - username
    type: object
  model.UserRegistrationModel:
    properties:
      email:
        type: string
      name:
        maxLength: 150
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - customer
        - admin
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
host: localhost:9999
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: Tech Hive E-commerce application using Go Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Tech Hive E-commerce
  version: 1.0.0
paths:
  /v1/api/authentication:
    post:
      consumes:
      - application/json
      description: authenticate user.
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UserModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      summary: authenticate user
      tags:
      - Authenticate user
  /v1/api/cart:
    delete:
      consumes:
      - application/json
      description: Remove all items from the user's shopping cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Clear cart
      tags:
      - Cart
    get:
      consumes:
      - application/json
      description: Get the current user's shopping cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Get user's cart
      tags:
      - Cart
  /v1/api/cart/items:
    post:
      consumes:
      - application/json
      description: Add a product to the user's shopping cart
      parameters:
      - description: Add to cart request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AddToCartModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Add item to cart
      tags:
      - Cart
  /v1/api/cart/items/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an item from the user's shopping cart
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Remove item from cart
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Update the quantity of an item in the user's cart
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update cart item request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateCartItemModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Update cart item quantity
      tags:
      - Cart
  /v1/api/mpesa/callback:
    post:
      consumes:
      - application/json
      description: Process M-Pesa payment callback (webhook)
      parameters:
      - description: M-Pesa callback request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MpesaCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      summary: Process M-Pesa callback
      tags:
      - M-Pesa
  /v1/api/mpesa/stkpush:
    post:
      consumes:
      - application/json
      description: Initiate M-Pesa payment for an order
      parameters:
      - description: M-Pesa payment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MpesaPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Initiate M-Pesa STK Push
      tags:
      - M-Pesa
  /v1/api/orders:
    get:
      consumes:
      - application/json
      description: Get all orders for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Get user's orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a new order from the user's cart items
      parameters:
      - description: Create order request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateOrderModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Create new order from cart
      tags:
      - Orders
  /v1/api/orders/{id}:
    delete:
      consumes:
      - application/json
      description: Cancel a pending order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Cancel order
      tags:
      - Orders
    get:
      consumes:
      - application/json
      description: Get a specific order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Get order by ID
      tags:
      - Orders
  /v1/api/orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order (admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update order status request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateOrderStatusModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: Update order status
      tags:
      - Orders
  /v1/api/product:
    get:
      consumes:
      - application/json
      description: Get all exists products.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: get all exists products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: create product.
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ProductCreateOrUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: create product
      tags:
      - Product
  /v1/api/product/{id}:
    delete:
      consumes:
      - application/json
      description: delete one exists product.
      parameters:
      - description: Product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: delete one exists product
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get one exists product.
      parameters:
      - description: Product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: get one exists product
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: update one exists product.
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ProductCreateOrUpdateModel'
      - description: Product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: update one exists product
      tags:
      - Product
  /v1/api/product/search:
    post:
      consumes:
      - application/json
      description: Search products with filters and pagination.
      parameters:
      - description: Search parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ProductSearchModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: search products with filters and pagination
      tags:
      - Product
  /v1/api/seed/all:
    post:
      consumes:
      - application/json
      description: Create all sample data (users and products) for testing
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      summary: Seed all sample data
      tags:
      - Seed
  /v1/api/seed/products:
    post:
      consumes:
      - application/json
      description: Create sample products for testing
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      summary: Seed sample products
      tags:
      - Seed
  /v1/api/seed/users:
    post:
      consumes:
      - application/json
      description: Create sample users for testing
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      summary: Seed sample users
      tags:
      - Seed
  /v1/api/transaction:
    get:
      consumes:
      - application/json
      description: Get all exists transaction.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: get all exists transaction
      tags:
      - Transaction
    post:
      consumes:
      - application/json
      description: create transaction.
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TransactionCreateUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: create transaction
      tags:
      - Transaction
  /v1/api/transaction-detail/{id}:
    get:
      consumes:
      - application/json
      description: Get one exists transaction detail.
      parameters:
      - description: Transaction Detail Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: get one exists transaction detail
      tags:
      - Transaction Detail
  /v1/api/transaction/{id}:
    delete:
      consumes:
      - application/json
      description: delete one exists transaction.
      parameters:
      - description: Transaction Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: delete one exists transaction
      tags:
      - Transaction
    get:
      consumes:
      - application/json
      description: Get one exists transaction.
      parameters:
      - description: Transaction Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: get one exists transaction
      tags:
      - Transaction
  /v1/api/users:
    post:
      consumes:
      - application/json
      description: register new user.
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UserRegistrationModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      summary: register new user
      tags:
      - Register user
schemes:
- http
- https
securityDefinitions:
  JWT:
    description: Authorization For JWT
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
